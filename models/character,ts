import { InferInput, minLength, object, pipe, string } from "valibot";

export const CharacterSchema = object({
    name: pipe(string(), minLength(6)),
    lastName: pipe(string(), minLength(6))
})
export type Character = InferInput<typeof CharacterSchema> & {
    id: number
};

const characters: Map<number,Character> = new Map();

export const getAllCharacters = (): Character[] => {
    return Array.from(characters.values())
}

export const addCharacter = (character:Character): Character =>{
    const newCharacter = { ...character, id: Date.now() }
    characters.set(newCharacter.id, newCharacter)
    return newCharacter
}

export const updateCharacter = (id:number,updateCharacter:Character):Character|null=>{
    if(!characters.has(id)){
        console.error('Character with id',id ,'ont found')
        const character = characters.get(id)
        return null
    }
    characters.set(id,updateCharacter)
    return updateCharacter
        
}

export const deleteCharacter = (id:number):boolean =>{
    if(!characters.has(id)){
        console.error('Character with id',id ,'ont found')
        return false
    }
    characters.delete(id)
    return true
}
